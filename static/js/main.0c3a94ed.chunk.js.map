{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAUAA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,+CACZC,UAAW,+BACXC,cAAe,2CACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGnB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAmB3B,SAASC,IAMP,OAAQ,wBAAQC,QALS,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAGf,kCASV,SAASG,IAEP,IAAMC,EAAQC,mBACRC,EAAcT,EAAUU,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAErD,EAAmBC,YAAkBH,EAAO,CAACI,QAAU,OAAhDC,EAAP,oBACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAE,WAAMC,GAAN,mBAAAC,EAAA,6DACjBD,EAAEE,iBADe,EAEQxB,EAAKyB,YAAvBC,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAFK,SAGXjB,EAAYkB,IAAI,CACpBC,KAAOV,EACPW,UAAYvC,IAASU,UAAU8B,WAAWC,kBAC1CN,MACAC,aAPe,OASjBP,EAAa,IACbZ,EAAMyB,QAAQC,eAAe,CAACC,SAAS,WAVtB,2CAAF,sDAajB,OACE,qCACE,iCACGlB,GAAYA,EAASmB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACzD,qBAAKC,IAAMjC,OAEf,uBAAMkC,SAAUrB,EAAhB,UACE,uBAAOsB,MAAOxB,EAAWyB,SAAU,SAACtB,GAAD,OAAMF,EAAaE,EAAEuB,OAAOF,UAC/D,wBAAQG,KAAK,SAAb,wBAMJ,SAASR,EAAYS,GACnB,MAAgCA,EAAMR,QAA9BV,EAAR,EAAQA,KAAMH,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAEbqB,EAAetB,IAAQ1B,EAAKyB,YAAYC,IAAM,OAAS,WAC7D,OACE,sBAAKuB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKvB,GAAY,0DACtB,4BAAIE,OAKKsB,MA/Ef,WAEE,MAAeC,YAAapD,GAArBqD,EAAP,oBACA,OACE,sBAAKJ,UAAU,MAAf,UACE,2BAIA,kCACGI,EAAO,cAAC9C,EAAD,IAAe,cAACL,EAAD,UCtBhBoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c3a94ed.chunk.js","sourcesContent":["import React, {useRef,useState} from 'react';\nimport './App.css';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyA5juyepGbrMQoyDPgsMQ15ezxoVdn1hBM\",\n    authDomain: \"chatapp-react-firebase-16f8b.firebaseapp.com\",\n    projectId: \"chatapp-react-firebase-16f8b\",\n    storageBucket: \"chatapp-react-firebase-16f8b.appspot.com\",\n    messagingSenderId: \"1014394207924\",\n    appId: \"1:1014394207924:web:0d400bab21b2a1191a61e1\",\n    measurementId: \"G-5D0STM5FZZ\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n//const analytics = firebase.analytics();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n        \n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);    \n  }\n\n  return (<button onClick={signInWithGoogle}> Sign in with Google</button>)\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={() => auth.SignOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25)\n\n  const [messages] = useCollectionData(query, {idField : 'id'}); \n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage =async(e) => {\n    e.preventDefault();\n    const {uid, photoURL } = auth.currentUser;\n    await messagesRef.add({\n      text : formValue,\n      createdAt : firebase.firestore.FieldValue.serverTimestamp(),\n      uid, \n      photoURL \n    })\n    setFormValue('');\n    dummy.current.scrollIntoView({behavior:'smooth'});\n  }\n\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n      <div ref ={dummy}></div>\n      </main>\n  <form onSubmit={sendMessage}>\n    <input value={formValue} onChange={(e)=> setFormValue(e.target.value)} />\n    <button type=\"submit\">Send</button>\n  </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}